.. -*- coding: utf-8 -*-

=========================================
Computergestützte Mathematik zur Analysis
=========================================

---------------------------------------------------------------------
Übersicht über die verwendeten Befehle, nach Lektionen geordnet
---------------------------------------------------------------------
Innerhalb der Lektionen sind die Befehle größtenteils nach Auftreten,
nicht nach Semantik geordnet

.. contents:: Inhaltsverzeichnis
              :backlinks: none

Lektion 1
*********

Arithmetik
==========

* Befehle werden mit ``;``
  oder ``:`` abgeschlossen.  Im
  ersten Fall wird das Ergebnis angezeigt, im zweiten nicht.  
  Zeilenende impliziert ``;``

* ``+``, ``-``, ``*``, ``/``, ``//``, ``%``, ``**``

  arithmetische Operatoren

* ``#``

  Kommentare


Variablen
=========

* ``=``

  Zuweisung

* ``type``
	    
  Typ eines Ausdrucks

* ``print``

  einfache Ausgabe

* ``j``

  imaginäre Einheit (üblicherweise 'i', in Python 'j')


Zeichenketten (engl. strings)
=============================

* ``'text'``

  Zeichenketten. Können mit einfachen oder
  doppelten Anführungszeichen angegeben werden

* ``s[0]``

  Zugriff auf Elemente des Strings s
            

Listen
======

* ``list``

  Liste erstellen

* ``[]``

  Liste erstellen

* ``append``

  Elemente an eine Liste anfügen

* ``len``

  Länge einer Liste

* ``l[0]``

  Zugriff auf Elemente der Liste l

* ``[[1,2],[3,4]]``

  Liste von Listen


Dictionaries (Wörterbücher)
===========================

* ``dict``

  Wörterbuch erstellen

* ``d[2]``

  Aufruf

* ``del``

  Löschen von Einträgen


Tupel
=====

* ``tuple``

  Tupel erstellen

* ``()``

  Tupel erstellen


Mengen
======

* ``set``

  Menge erstellen

* ``{}``

  Menge erstellen

* ``a in b``

  prüft, ob a in b enthalten ist

* ``|``

  Vereinigung


Kopieren
========

* ``b=a``

  erstellt einen neuen Namen b für das das selbe Objekt, auf das auch a zeigt

* ``b=a[:]``

  Erstellt ein neues Objekt b. Achtung: Die Einträge aus a können auch Zeiger sein!


Text formatieren
================

* ``\it{text}``

  Latex kursiv

* ``*text*`` oder ``_text_``

  kursiv

* ``\bf{text}``

  Latex fett

* ``**text**`` oder ``__text__``

  fett


zurück zum Inhaltsverzeichnis_


Lektion 2
*********

Boolesche Variablen und Operationen
===================================

* ``True``, ``False``

  wahr, falsch

* ``and``, ``or``, ``|``, ``not``

  logisches und, logisches oder, bitweises oder, Negation


Vergleiche
==========

* ``<=``, ``<``, ``==``, ``>``, ``>=``, ``!=``

  kleiner gleich, kleiner, gleich, größer, größer gleich, ungleich


If Anweisungen
==============

* ``if``, ``elif``, ``else``

  Verzweigungen

* ``from numpy.random import rand``

  Import eines Elements der Bibliothek

* ``rand``

  Zufallszahlen in [0,1)


Funktionen
==========

* ``def``

  Funktionsdefinition

* ``return``

  Rückgabewert

* ``?``

  Hilfe zu einem Befehl

* ``""" Sehr langer Kommentar """``

  langer oder mehrzeiliger Text 

* ``format``

  formatiert den Text


for Schleife
============

* ``for``

  Schleife (Blöcke werden durch Einrückung erklärt)

* ``range``

  konsekutive Folge von ganzen Zahlen als Liste


while Schleife
==============

* ``while``

  Schleife (Blöcke werden durch Einrückung erklärt)

* ``randint(a,b)``

  Zufallsinteger N mit a <= N <= b

* ``a += b``

  kurz für a = a + b


Generatoren
===========

* ``for a in b``

  Generator

Ein Beispiel: Minimum
=====================

* ``abs``

  Absolutbetrag

* ``assert``

  testet auf Fehler

* ``isinstance``

  Typenvergleich

* ``*``

  verwandelt Variable mit mehreren Einträgen in mehrere Variablen,
  erlaubt beliebige Menge an Variablen in der Übergabe in einer Funktion


zurück zum Inhaltsverzeichnis_


Lektion 3
*********

Objektorientiete Programmierung
===============================

* ``objekt. + TAB Taste``

  zeigt mögliche Vervollständigungen an

* ``dir``

  zeigt Variablen und Methoden des Objekts an

Klassen
=======

* ``class``

  Klasse erstellen

* ``pass``

  macht nichts, Platzhalter

* ``__init__``

  Konstruktor der Klasse

* ``self``

  Bezeichner für das Objekt selbst,
  muss immer das erste Argument jeder Methode sein,
  wird aber nicht mit übergeben beim Aufruf

* ``self.x``

  objektinterne Variable

* ``__repr__``

  Darstellung des Objekts

* ``__add__``, ``__sub__``, ``__mul__``, ``__truediv__``

  Methoden zur Verwendung der Symbole `+`, `-`, `*`, `/`

* ``__call__``

  Aufruf des Objekts (z.B. objekt(argument))

* ``keys``

  Schlüssel eines Dictionaries


zurück zum Inhaltsverzeichnis_


Lektion 4
*********

numpy Funktionen
================

* ``import numpy as np``

  Bibliothek numerischer Grundfunktionen

* ``np.pi``

  Numpy Approximation an die Zahl Pi

* ``np.array``

  Verwandlung von Liste in Array


Array Variablen und Funktionen
==============================

* ``shape``

  Form des Arrays (Anzahl der Elemente pro Dimension)

* ``reshape``

  Umformatierung des Arrays

* ``flatten``

  Array wird eindimensional gemacht

* ``np.arange``

  wie range nur als Array

* ``np.linspace``

  Vektor (array) aus gleichmäßig in einem Intervall verteilten Punkten

* ``@``

  Matrixprodukt


Universelle Funktionen
======================

* ``np.sin``, ``np.cos``, ``np.exp``, ``np.arctan``, ...

  numpy-Versionen der elementaren Funktionen 

* ``%%timeit``

  misst die Zeit der Befehlskette


Plots
=====

* ``import matplotlib.pyplot as plt``
  
  Zeichenbibliothek zu numpy

* ``%matplotlib inline``

  Standard-Grafikmodus

* ``plt.plot``

  2D-Graphen unter ``matplotlib``


Plotoptionen
============

* ``plt.axis``

  Minimal- und Maximalwerte für die Achsen

* ``plt.figure``

  neues Bild wird angelegt

* ``plt.title``

  Überschrift
  
* ``plt.legend``

  die Labels werden angezeigt

* ``plt.subplots``

  mehrere Grafiken in einem Bild

* ``set_title``

  Überschrift

* ``set_facecolor``

  Hintergrundfarbe


zurück zum Inhaltsverzeichnis_


Lektion 5
*********

Plotverschönerung
=================

* ``import itertools``

  Paket mit Tools für iterative Programme

* ``itertools.count``

  zählender Iterator

* ``zip``

  erstellt einen Iterator, der aus Tupeln besteht

* ``'-'``, ``'--'``, ``'-.'``, ``':'``

  Linestyles

* ``linewidth``

  Dicke der Linie

* ``plt.show``

  zeigt ein Bild

* ``'.'``, ``','``, ``'o'``, ``'^'``, etc.

  Marker

* ``markersize``

  Größe des Markers

* ``np.zeros_like``

  Array mit Nullen. Dimension und Typ wie das Argument

* ``np.ones_like``

  Array mit Einsen. Dimension und Typ wie das Argument


Broadcasting
============

* ``x+y``, ``x*y``

  Broadcasting von Arrays

* ``np.zeros``

  Array mit Nullen

* ``np.ones``

  Array mit Einsen

* ``z.dtype``

  Datentyp der Einträge von z


Ebene parametrische Plots
=========================

* ``plt.xticks``, ``plt.yticks``

  Markierungen auf der x-/y-Achse

* ``plt.polar``

  Polarplot

* ``plt.cm.viridis``

  Färbung "viridis"


3D-Plots
========

* ``from mpl_toolkits.mplot3d import Axes3D``

  das muss man machen, obwohl Axes3D nicht direkt verwendet wird

* ``np.meshgrid``

  erzeugt X- und Y-Gitterkoordinaten

* ``fig.add_subplot(111, projection='3d')``

  erzeugt eine Achse, d.h. ein Koordinatensystem
  dabei ist ``fig`` eine ``plt.figure``
  projection='3d' für 3D-Plots, ohne 2D-Plot

* ``ax.plot_surface``

  3D-Graph, dabei ist ``ax`` eine Achse wie im vorigen Befehl

* ``cmap``

  Färbung des Bildes

* ``rstride``. ``cstride``

  Schrittweite zum Erstellen des Bildes in die jeweilige Richtung

* ``alpha``

  Transparenz des Bildes

* ``plt.savefig``

  speichert Bild in Datei

* ``ax.plot_wireframe``

  wie plot_surface, aber als Drahtmodell

* ``ax.view_init``

  Blickwinkel

* ``ax.set_zticks``

  Markierungen an der z-Achse (set_xticks, set_yticks genauso)

* ``ax.contour``, ``plt.contour``

  2D-Plot von Höhenlinien, in 3D-Plots benutzbar

* ``ax.set_zlim3d``

  Grenzen der z-Achse im Plot

* ``ax.set_xlabel``, ``ax.set_ylabel``

  Benennung der Achsen

* ``from skimage import measure``

  Paket mit Funtionen zur Berechnung von bestimmten Größen im Zusammenhang mit Plots

* ``measure.find_contours``

  Höhenlinien/Kontur für 2D-Daten

* ``astype``

  konvertiert Datentyp

* ``measure.marching_cubes_lewiner``

  Triangulierung der Kontur für 3D-Daten

* ``ax.plot_trisurf``

  3D-Plot einer Triangulierung


zurück zum Inhaltsverzeichnis_


Lektion 6
*********

Symbolische Rechnung
====================

* ``from sympy import *``

  Paket zur symbolischen Rechnung. Alle weiteren Befehle in dieser Lektion sind Teil dieses Pakets

* ``Rational``

  rationale Zahlen - im Gegensatz zu floats

* ``zoo``

  komplexes unendlich

* ``oo``

  unendlich

* ``NaN``

  unbestimmtes Ergebnis ("Not a Number")

* ``N``

  numerische Auswertung eines Ausdruckes


Sympyfizierungen
================

* ``S``

  verwandelt allgemeines Python-Objekt in ``sympy``-Objekt, falls das sinnvoll ist


Symbole
=======

* ``x = S('x')``

  Einrichtung eines Symbols

* ``x = Symbol('x')``

  alternative, siehe auch unter Annahmen_


Funktion
========

* ``f(3*x)``

  Funktionsaufruf mit Symbol x


Ausdruck
========

* ``f = x**2``

  Ausdruck mit Symbol x


Ersetzungen
===========

* ``f.subs(x,3*x)``

  Einsetzen von 3*x für x in Ausdruck f


Singleton
=========

* ``x = S('x')``

  erzeugt immer dasselbe Symbol


Spezielle Werte und Funktionen
==============================

* ``I``

  imaginäre Einheit

* ``pi``

  Pi

* ``exp``

  Exponentialfunktion

* ``exp(1)``

  Eulersche Zahl

* ``sqrt``

  Quadratwurzel

* ``factorial``

  Fakultät

* ``from scipy import special``

  scipy: Paket zum wissenschaftlichen Rechnen
  special: spezielle Funktionen

* ``cos``, ``asin``, ``tan``

  Kosinus, Arkussinus, Tangens


Vereinfachungen
===============

* ``simplify``

  vereinfacht den Ausdruck unter Verwendung vieler Vereinfachungsfunktionen

* ``expand``

  multiplizierte den Ausdruck aus

* ``factor``

  Faktorisiert den Ausdruck. Berechnet keine Primfaktorzerlegung

* ``ratsimp``

  vereinfacht rationale Ausdrücke

* ``powsimp``

  vereinfacht Potenzen

* ``trigsimp``

  vereinfacht Ausdrücke mittels trigonometrischer Identitäten


Annahmen
========

* ``Symbol('x', positive=True)``

  das Symbol wird als positiv vereinbart

* ``_assumptions``

  zeigt die zu einem Objekt vereinbarten Annahmen (Attribute)


Dreiwertige Logik
=================

  (siehe Lektion)


zurück zum Inhaltsverzeichnis_


Lektion 7
*********

Konkrete Polynome
=================

* ``degree``

  Grad eines Polynoms

* ``coeff``

  Koeffizient eines Faktors


universale Funktionen
=====================

* ``lambdify``

  generiert universale Funktion aus sympy Funktion


Operatoren und träge Operatoren
===============================

* ``limit``

  Grenzwertbestimmung

* ``Limit``

  träger Operator zur Grenzwertbestimmung, d.h. der Grenzwert wird nicht ausgerechnet

* ``doit``

  führt träge Operatoren aus


Darstellung
===========

* ``from IPython.display import Markdown, display``

  Darstellungspaket

* ``Markdown``

  erzeugt "schöne" Ausgabe

* ``display``

  zeigt Ausdruck "möglichst schön" an

* ``latex``

  String für die LaTex Darstellung des Ausdrucks


Operatoren und träge Operatoren (Fortsetzung)
=============================================

* ``diff``

  Ableitungen

* ``collect``

  fasst den Ausdruck in bestimmten Termen zusammen

* ``Integral``

  träger Integraloperator


weitere Funktionen
==================

* ``erf``

  Fehlerfunktion

* ``atan``

  Arkustangens

* ``replace``

  ersetzt Ausdrücke, mächtiger als subs

* ``floor``

  Abrunden auf nächstkleinere ganze Zahl


zurück zum Inhaltsverzeichnis_  


Lektion 8
*********

Summen und Reihen
=================

* ``Sum``

  träger Summenoperator


Sympy rechnet komplex
=====================

* ``re``

  Realteil

* ``im``

  Imaginärteil


Lösen von Gleichungen
=====================

* ``Eq``

  Gleichung

* ``solveset``

  Lösen einer Gleichung

* ``Glg.lhs``, ``Glg.rhs``

  linke bzw. rechte Seite der Gleichung Glg

* ``l.sort``

  sortiert Liste l

* ``l._get_interval``

  gibt ein Interval an, in dem sich die Lösung l befindet

* ``minimal_polynomial``

  Minimalpolynom einer Zahl, falls es existiert

* ``solve``

  Lösung einer Gleichung oder eines Gleichungssystems, manchmal besser als solveset


zurück zum Inhaltsverzeichnis_


Lektion 9
*********

Lambertsche W-Funktion
======================

* ``mpmath``

  Paket zur Rechnung mit beliebiger Präzision

* ``LambertW``

  Lambertsche W-Funktion. In smypy: LambertW, in scipy.specical und mpmath: lambertw

* ``y.real``, ``y.imag``

  Real- bzw. Imaginärteil einer komplexen Zahl y  


Reihenentwicklungen
===================

* ``series``

  Reihenentwicklung

* ``removeO``

  entfernt den Ordnungsterm


zurück zum Inhaltsverzeichnis_


Lektion 10
**********

Numerisches Lösung von Gleichungen
==================================

* ``nsolve(glg,x0)``

  numerische Lösung einer Gleichung mit Startwert x0

* ``nsolve(glg,[x1,x2])``

  numerische Lösung mit Startintervall [x1,x2]

* ``nsolve(glg,[x1,x2],solver='bisect')``

  Bisektionsverfahren

* ``nsolve(glg,[x1,x2],solver='anderson')``

  Anderson-Björk Verfahren

* ``nsolve(glg,...,prec=100)``

  numerische Lösung mit dezimaler Präzision 100


Erhöhung der Genauigkeit
========================

* ``mpmath.mp.dps``

  dezimale Präzision im Paket ``mpmath``


Stückweise definierte Funktionen
================================

* ``Piecewise``

  stückweise Definition einer Funktion


zurück zum Inhaltsverzeichnis_


Lektion 11
**********

Matrizen in sympy
=================

* ``Matrix``

  Matrix (sympy)

* ``A[1]``

  Element an Stelle 1 (für Vektoren)

* ``*``

  Matrixmultiplikation

* ``A[0,1]``

  Element in Zeile 0, Spalte 1


Slicing
=======

* ``A[1,:]``

  Zeile 1

* ``A[0,:]``

  Spalte 0


Spezielle Matrizen
==================

* ``eye(n)``

  Einheitsmatrix der Größe n x n

* ``ones(m,n)``

  Matrix aus nur Einsen der Größe m x n

* ``diag(*list)``

  (Block-)Diagonalmatrix mit den Einträgen aus list als (Block-)Diagonalelemente


Operationen
===========

* ``x.T``

  Transposition

* ``A**(-1)``

  Inversion

* ``A.det()``

  Determinante

* ``Matrix.vstack, Matrix.hstack``

  vertikales bzw. horizontales Stapeln mehrerer Matrizen

* ``flatten(A)``

  erzeugt einen Zeilenvektor durch Konkatenation der Zeilen von A

* ``Matrix(m,n,func)``

  erzeugt Matrix der Größe m x n mittels Elementfunktion func


Matrixplots
===========

* ``np.array(H)``

  verwandelt Matrix H in ein np.array

* ``plt.imshow``

  2D Schema der Matrix

* ``plt.colorbar``

  Anzeige der Farbskala

* ``np.sign``

  Vorzeichenfunktion


Lineare Gleichungssysteme
=========================

* ``[Symbol(f"x_{j}") for j in [1,2,3]]``

  Symbole mit Indices (als String)


Eigenwerte
==========

* ``A.eigenvals``

  Eigenwerte von A

* ``A.eigenvects``

  Eigenwerte und Eigenvektoren von A


zurück zum Inhaltsverzeichnis_


Lektion 12
**********

Jordansche Normalform
=====================

* ``C.jordan_form``

  Jordansche Normalform von C


Rang einer Matrix
=================

* ``M.rank``

  Rang von M

* ``M.copy``

  erzeugt eine Kopie des Objekts M

* ``M.row_op``

  Operation auf eine Zeile von M


Normen und Vektoren und Matrizen
================================

* ``v.norm``

  Euklidsche Norm von Vektor v

* ``v.norm(oo)``

  Maximumsnorm von Vektor v

* ``v.norm(1)``

  1-Norm von Vektor v

* ``A.norm``

  Frobeniusnorm von Matrix A

* ``A.norm(2)``

  2-Norm von Matrix A


Vektoranalysis
==============

* ``sympy.abc``

  vordefinierte Symbole

* ``Matrix([f]).jacobian(xyz)``

  Jacobimatrix der Abbildung f in den Variablen in xyz 

* ``hessian(f, xyz)``

  Hessematrix der Abbildung f in den Variablen in xyz

* ``Function``

  Funktion

Hurwitz-Kriterium
=================

  siehe Vorlesung, keine neuen Befehle


Extremwerte in mehreren Veränderlichen
======================================

* ``from matplotlibs.colors import Normalize``

  Normalize normiert Daten in das [0,1] Intervall

* ``ax.plot_surface(X, Y, W, cmap=plt.cm.viridis, norm=norm)``

  Anwendung der Normalisierung norm auf die Färbung des Bildes

* ``np.concatenate``

  hängt Listen aneinander


zurück zum Inhaltsverzeichnis_


Lektion 13
**********

  
zurück zum Inhaltsverzeichnis_

Lektion 14
**********

  
zurück zum Inhaltsverzeichnis_

----------------------

© 2018-2019 `Rüdiger Braun`_ und `David Kerkmann`_

zurück zum Inhaltsverzeichnis_

.. _`Rüdiger Braun`: mailto:Ruediger.Braun@uni-duesseldorf.de 
.. _`David Kerkmann`: mailto:David.Kerkmann@uni-duesseldorf.de
